---
title: "Introduction to Biostatistics"
format:
  # html: 
  #   toc: true
  #   toc-location: left
  #   slide-level: 3
  #   number-sections: true
  #   toc-depth: 2
  #   self-contained: true
  #   #output-file: "Mult22-1-handout"
  # pdf: 
  #   toc: true
  #   number-sections: true
  #   #slide-level: 3
  #   toc-depth: 2
  #   shift-heading-level-by: 0
  #   number-offset: [2]
  revealjs:
    toc: false
    number-sections: true
    #slide-level: 3
    scrollable: true
    embed-resources: true
    slide-number: true
    width: 1200
knitr: 
  opts_chunk:
    echo: true
    message: false
    warning: false
---

```{r, include = FALSE, echo = FALSE, wanring = FALSE, message= FALSE}
library(tidyverse)
library(gapminder)
library(DescTools)
theme_set(theme_classic(base_size = 16))
set.seed(12345)
```

# Learning objectives

## Learning objectives

* Select an **appropriate plot** for the **variable type**
* Create plots in **ggplot2** (part of the **tidyverse**)

# Plots

## Review: Variable types

R variable type | Stevens (1946) variable type | **ggplot2** *
------------|-----------------------|-----------------
`chr`       | nominal               | discrete  
`fct`       | nominal or ordinal    | discrete        
`log`       | nominal or ordinal    | discrete
`int`       | interval or ratio     | continuous
`dbl`       | interval or ratio     | continuous

\* From the [**ggplot2** cheatsheet](https://rstudio.github.io/cheatsheets/data-visualization.pdf)

## Why do we make plots?

- Exploration

- Analysis

- Presentation

- Sometimes, the best way to convey really complicated information

## Baby data - 5.5 mo vs 10.5 mo

:::: {.columns}

::: {.column width="25%"}

![](Screenshot_20210719-183055_HatchBaby.png)

:::

::: {.column width="25%"}

![](Screenshot_20210820-151952_HatchBaby.png)

:::

::::

## How we'd like it to work

![](statistics.png)

[https://xkcd.com/2400/](https://xkcd.com/2400/)

## How it really works

![](plots1.jpg)

[https://www.instagram.com/twisteddoodles/](https://www.instagram.com/twisteddoodles/)


# Data

## Data

* `ICU` data from the **Stat2Data** package
  * `ID`: Patient ID code
  * `Survive`: 1 = patient survived to discharge or 0 = patient died
  * `Age`: Age (in years)
  * `AgeGroup`: 1 = young (under 50), 2 = middle (50-69), 3 = old (70+)
  * `Sex`: 1 = female or 0 = male
  * `Infection`: 1 = infection suspected or 0 = no infection
  * `SysBP`: Systolic blood pressure (in mm of Hg)
  * `Pulse`: Heart rate (beats per minute)
  * `Emergency`: 1 = emergency admission or 0 = elective admission

## Data

* Nominal / ordinal / factor / discrete / binary
  * `Survive`: 1 = patient survived to discharge or 0 = patient died
  * `Sex`: 1 = female or 0 = male
  * `Infection`: 1 = infection suspected or 0 = no infection
  * `Emergency`: 1 = emergency admission or 0 = elective admission 
* Ordinal / factor / discrete
  * `AgeGroup`: 1 = young (under 50), 2 = middle (50-69), 3 = old (70+)

## Data

* Ratio / integer / numeric / continuous
  * `Age`: Age (in years)
  * `SysBP`: Systolic blood pressure (in mm of Hg)
  * `Pulse`: Heart rate (beats per minute) 

## Data

```{r}
library(Stat2Data)
data(ICU)
head(ICU)
```

## Change variable types

```{r}
ICU$Survive <- as.factor(ICU$Survive)
ICU$Sex <- as.factor(ICU$Sex)
ICU$Infection <- as.factor(ICU$Infection)
ICU$Emergency <- as.factor(ICU$Emergency)
ICU$AgeGroup <- as.factor(ICU$AgeGroup)
```

* Default for factor variable categories is numerical order or alphabetical order
* Nothing we're doing today *requires* this, but it *can* matter for more complex figures and if you want to do something really specific
  * You can also change the variable type within `ggplot()`

# **ggplot2** package

## **ggplot2** package

* Wilkinson, L. (2005). *The Grammar of Graphics (2nd ed.)*. Statistics and Computing, New York: Springer.
* Wickham, H. (2010). A layered grammar of graphics. *Journal of computational and graphical statistics, 19*(1), 3-28.
* Wickham, H. (2016). *ggplot2: elegant graphics for data analysis*.
Springer.
* [Online documentation](https://ggplot2.tidyverse.org/reference/)

## Grammar of graphics

* Grammar gives language rules. -- Leland Wilkinson
* The grammar tells us what words make up our graphical "sentences," but offers no advice on how to write well. -- Hadley Wickham
  * "Colorless green ideas sleep furiously"
  
## Grammar of graphics

:::: {.columns}

::: {.column width="50%"}
* Data
* Variables
* Geometry
* Aesthetics

:::

::: {.column width="50%"}
* Algebra
* Scales
* Statistics
* Coordinates
* Facets

:::

::::

## `ggplot()` structure

```{r}
#| eval: false
ggplot(data = DATA,
       aes(x = XVAR, y = YVAR)) +
       geom_MYGEOM() +
       geom_ANOTHERGEOM() +
       SOME_OTHER_THING +
       ANOTHER_THING
```

# Plots for a single variable

## Different kinds of plots

![](plots2.png)

[https://www.instagram.com/twisteddoodles/](https://www.instagram.com/twisteddoodles/)

## One discrete: `geom_bar()`

```{r}
#| output-location: column
#| results: hold
#| echo: true
ggplot(data = ICU, 
       aes(x = Survive)) + 
       geom_bar()
```

## One discrete: `geom_bar()`

```{r}
#| output-location: column
#| results: hold
#| echo: true
ggplot(data = ICU, 
       aes(x = AgeGroup)) + 
       geom_bar()
```

## One continuous: `geom_bar()`

```{r}
#| output-location: column
#| results: hold
#| echo: true
ggplot(data = ICU, 
       aes(x = Age)) + 
       geom_bar()
```

## One continuous: `geom_histogram()`

```{r}
#| output-location: column
#| results: hold
#| echo: true
ggplot(data = ICU, 
       aes(x = Age)) + 
       geom_histogram(bins = 30)
```

## One continuous: `geom_histogram()`

```{r}
#| output-location: column
#| results: hold
#| echo: true
ggplot(data = ICU, 
       aes(x = Age)) + 
       geom_histogram(bins = 60)
```

## One continuous: `geom_histogram()`

```{r}
#| output-location: column
#| results: hold
#| echo: true
ggplot(data = ICU, 
       aes(x = Age)) + 
       geom_histogram(binwidth = 2)
```

## One continuous: `geom_dotplot()`

```{r}
#| output-location: column
#| results: hold
#| echo: true
ggplot(data = ICU, 
       aes(x = Age)) + 
       geom_dotplot(binwidth = 1)
```

## One continuous: `geom_dotplot()`

```{r}
#| output-location: column
#| results: hold
#| echo: true
ggplot(data = ICU, 
       aes(x = Age)) + 
       geom_dotplot(binwidth = 2)
```

## One continuous: `geom_dotplot()`

```{r}
#| output-location: column
#| results: hold
#| echo: true
ggplot(data = ICU, 
       aes(x = Age)) + 
       geom_dotplot(binwidth = 2, 
                    method = "histodot")
```

## One continuous: `geom_dotplot()`

```{r}
#| output-location: column
#| results: hold
#| echo: true
ggplot(data = ICU, 
       aes(x = Age)) + 
       geom_dotplot(binwidth = 2, 
                    method = "histodot", 
                    stackdir = "center")
```

## One continuous: `geom_density()`

```{r}
#| output-location: column
#| results: hold
#| echo: true
ggplot(data = ICU, 
       aes(x = Age)) + 
       geom_density()
```

## One continuous: `geom_violin()`

```{r}
#| output-location: column
#| results: hold
#| echo: true
ggplot(data = ICU, 
       aes(x = Age)) + 
       geom_violin(aes(y = 0))
```

## One continuous: `violin` + `dotplot`

```{r}
#| output-location: column
#| results: hold
#| echo: true
ggplot(data = ICU, 
       aes(x = Age)) + 
       geom_violin(aes(y = 0)) + 
       geom_dotplot(method = "histodot", 
                    stackdir = "center", 
                    binwidth = 2)
```

::: {.callout-note}
`geom`s are layered in the order they're listed. `geom_violin()` is opaque white (by default), so if you listed `geom_dotplot()` and then `geom_violin()`, the dots would be almost completely covered.
:::

## One continuous: `stat_qq`

```{r}
#| output-location: column
#| results: hold
#| echo: true
ggplot(data = ICU,
       aes(sample = Age)) + 
       stat_qq() +
       stat_qq_line()
```

# Plots for two variables

## Two discrete: `geom_count()`

```{r}
#| output-location: column
#| results: hold
#| echo: true
ggplot(data = ICU, 
       aes(x = Sex, y = Survive)) + 
       geom_count()
```

## Two discrete: `geom_jitter()`

```{r}
#| output-location: column
#| results: hold
#| echo: true
ggplot(data = ICU, 
       aes(x = Sex, y = Survive)) + 
       geom_jitter()
```

## Two discrete: `geom_jitter()`

```{r}
#| output-location: column
#| results: hold
#| echo: true
ggplot(data = ICU, 
       aes(x = Sex, y = Survive)) + 
       geom_jitter(height = 0.25, 
                   width = 0.25)
```

## Two continuous: `geom_point()`

```{r}
#| output-location: column
#| results: hold
#| echo: true
ggplot(data = ICU, 
       aes(x = SysBP, y = Pulse)) + 
       geom_point()
```

## Two continuous: `geom_smooth()`

```{r}
#| output-location: column
#| results: hold
#| echo: true
ggplot(data = ICU, 
       aes(x = SysBP, y = Pulse)) + 
       geom_point() + 
       geom_smooth()
```

## Two continuous: `geom_smooth()`

```{r}
#| output-location: column
#| results: hold
#| echo: true
ggplot(data = ICU, 
       aes(x = SysBP, y = Pulse)) + 
       geom_point() + 
       geom_smooth(method = "lm", 
                   se = FALSE)
```

## One of each: `geom_col()`

```{r}
#| output-location: column
#| results: hold
#| echo: true
ggplot(data = ICU, 
       aes(x = Sex, y = Pulse)) + 
       geom_col()
```

## One of each: `geom_boxplot()`

```{r}
#| output-location: column
#| results: hold
#| echo: true
ggplot(data = ICU, 
       aes(x = Sex, y = Pulse)) + 
       geom_boxplot()
```

## One of each: `geom_dotplot()`

```{r}
#| output-location: column
#| results: hold
#| echo: true
ggplot(data = ICU, 
       aes(x = Sex, y = Pulse)) + 
       geom_dotplot(method = "histodot",
                    binaxis = "y", 
                    stackdir = "center")
```

## One of each: `geom_violin()`

```{r}
#| output-location: column
#| results: hold
#| echo: true
ggplot(data = ICU, 
       aes(x = Sex, y = Pulse)) + 
       geom_violin()
```

## One of each: `violin` + `dotplot`

```{r}
#| output-location: column
#| results: hold
#| echo: true
ggplot(data = ICU, 
       aes(x = Sex, y = Pulse)) + 
       geom_violin() + 
       geom_dotplot(method = "histodot",
                    binaxis = "y", 
                    stackdir = "center")
```

# A few more things

## Vertical lines

```{r}
#| output-location: column
#| results: hold
#| echo: true
ggplot(data = ICU, 
       aes(x = Age)) + 
       geom_histogram(bins = 30) + 
       geom_vline(xintercept = mean(ICU$Age, 
                                    na.rm = TRUE), 
                  color = "blue", 
                  linewidth = 1.5) + 
       geom_vline(xintercept = median(ICU$Age, 
                                      na.rm = TRUE), 
                  color = "red", 
                  linewidth = 1.5, 
                  linetype = "dashed")
```

## Colors

```{r}
#| output-location: column
#| results: hold
#| echo: true
ggplot(data = ICU, 
       aes(x = Age)) + 
       geom_histogram(bins = 30, 
       color = "black", 
       fill = "royalblue")
```

* A good resource on colors in R is [here](https://r-charts.com/colors/)

## Default theme

```{r}
#| output-location: column
#| results: hold
#| echo: true
ggplot(data = ICU, 
       aes(x = Age)) + 
       geom_histogram(bins = 30)
```

```{r}
#| output-location: column
#| results: hold
#| echo: true
ggplot(data = ICU, 
       aes(x = Age)) + 
       geom_histogram(bins = 30) +
       theme_gray()
```

# In-class activities

## In-class activities

* Make plots in **ggplot2**
* Select among **different plots** for the same variable

## Next week

* Colors and opacity
* Error bars
* Annotations (reference lines, cut-offs, text)
* Changing some common things (themes, labels, re-ordering categories)
* Complex combined plots (rugs, raincloud plots, index plot)
